mysql> CREATE TABLE users (
    -> id INT AUTO_INCREMENT,
    -> name VARCHAR(30),
    -> PRIMARY KEY (id)
    -> );
Query OK, 0 rows affected (0.16 sec)

mysql> CREATE TABLE friends (
    -> user_id INT,
    -> friend INT,
    -> PRIMARY KEY (user_id, friend),
    -> FOREIGN KEY (user_id) REFERENCES users(id),
    -> FOREIGN KEY (friend) REFERENCES users(id)
    -> );
Query OK, 0 rows affected (0.20 sec)

mysql> CREATE TABLE images (
    -> id INT AUTO_INCREMENT,
    -> image_user INT,
    -> FOREIGN KEY (image_user) REFERENCES users(id),
    -> PRIMARY KEY(id)
    -> );
Query OK, 0 rows affected (0.16 sec)

mysql> CREATE TABLE tags (
    -> image_id INT,
    -> tagged INT,
    -> FOREIGN KEY (tagged) REFERENCES users(id),
    -> FOREIGN KEY (image_id) REFERENCES images(id),
    -> PRIMARY KEY (image_id, tagged)
    -> );
Query OK, 0 rows affected (0.22 sec)

mysql> INSERT INTO users (name)
    -> VALUES ('Jatin'),
    -> ('Sahil'),
    -> ('Pramod'),
    -> ('Divya'),
    -> ('Ankit'),
    -> ('Rahul'),
    -> ('Vidit'),
    -> ('Kulraj'),
    -> ('userA');
Query OK, 9 rows affected (0.06 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> INSERT INTO friends VALUES
    -> (1, 2),
    -> (1, 3),
    -> (2, 1),
    -> (2, 4),
    -> (2, 6),
    -> (3, 1),
    -> (3, 5),
    -> (3, 8),
    -> (4, 2),
    -> (4, 6),
    -> (5, 3),
    -> (5, 6),
    -> (5, 8),
    -> (6, 2),
    -> (6, 4),
    -> (6, 5),
    -> (6, 8),
    -> (6, 9),
    -> (1, 9),
    -> (7, 8),
    -> (8, 3),
    -> (8, 5),
    -> (8, 6),
    -> (8, 7),
    -> (9, 1),
    -> (2, 9),
    -> (4, 9),
    -> (5, 9),
    -> (9, 2),
    -> (9, 4),
    -> (9, 5),
    -> (9, 6);
Query OK, 32 rows affected (0.04 sec)
Records: 32  Duplicates: 0  Warnings: 0

mysql> INSERT INTO images (image_user) VALUES
    -> (1),
    -> (9),
    -> (3),
    -> (2),
    -> (8),
    -> (5),
    -> (9),
    -> (2),
    -> (9);
Query OK, 9 rows affected (0.05 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> INSERT INTO tags VALUES
    -> (1, 9),
    -> (4, 9),
    -> (8, 9),
    -> (3, 8),
    -> (6, 8),
    -> (1, 3),
    -> (6, 5),
    -> (6, 2),
    -> (6, 4);
Query OK, 9 rows affected (0.10 sec)
Records: 9  Duplicates: 0  Warnings: 0

# Find image that has been tagged most no of times.
mysql> SELECT image_id
    -> FROM tags
    -> GROUP By image_id
    -> HAVING COUNT(*) = 
    -> (SELECT COUNT(*)
    -> FROM tags
    -> GROUP BY image_id
    -> ORDER BY COUNT(*) DESC
    -> LIMIT 1);
+----------+
| image_id |
+----------+
|        6 |
+----------+
1 row in set (0.00 sec)

# Find all images belonging to the friends of a particular user
mysql> SELECT images.id AS image_id
    -> FROM images JOIN friends
    -> ON image_user = friend
    -> WHERE user_id = 6;
+----------+
| image_id |
+----------+
|        4 |
|        8 |
|        6 |
|        5 |
|        2 |
|        7 |
|        9 |
+----------+
7 rows in set (0.00 sec)


# Find all friends of a particular user (Say, userA) who has tagged him in all of his pics.
mysql> SELECT friend
    -> FROM friends JOIN images
    -> ON friend = image_user
    -> AND user_id = 9
    -> JOIN tags
    -> ON images.id = image_id
    -> GROUP BY friend
    -> HAVING SUM(tagged = user_id) = COUNT(DISTINCT image_id);
+--------+
| friend |
+--------+
|      1 |
|      2 |
+--------+
2 rows in set (0.00 sec)

# Find friend of a particular user (Say, userA) who have tagged him most no. of times.
mysql> SELECT friend
    -> FROM friends JOIN images
    -> ON friend = image_user
    -> AND user_id = 9
    -> JOIN tags
    -> ON images.id = image_id
    -> GROUP BY friend
    -> HAVING COUNT(DISTINCT image_id) =
    -> (SELECT COUNT(DISTINCT image_id)
    -> FROM friends JOIN images
    -> ON friend = image_user
    -> JOIN tags
    -> ON images.id = image_id
    -> GROUP BY friend
    -> HAVING SUM(tagged = user_id) = COUNT(DISTINCT image_id)
    -> ORDER BY COUNT(DISTINCT image_id) DESC
    -> LIMIT 1);
+--------+
| friend |
+--------+
|      2 |
+--------+
1 row in set (0.00 sec)